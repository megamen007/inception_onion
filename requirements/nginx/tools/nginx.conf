#server: this start the server configuration in nginx It's where you specify settings for handling requests to a particular domain or IP address.
server
{
    #listen 443:  Tells Nginx to listen for incoming requests on port 443, which is the default port for HTTPS (secure connections).
    #ssl: Enables SSL (Secure Sockets Layer) , meaning Nginx will use encryption to protect data transmitted between the client (browser) and the server.
    listen 443 ssl;

    #server_name mboudrio.42.fr: his directive tells Nginx which domain (or domains) it should respond to. If a request comes to this domain, Nginx will apply the configuration in this block.
    server_name mboudrio.fr.42;

    #ssl_protocols TLSv1.2: Specifies the version of the TLS (Transport Layer Security) protocol to use for secure connections.
    #Indicates that only TLS version 1.2 is allowed. This is often set to enforce strong encryption by excluding older, less secure versions.
    ssl_protocols TLSv1.2;

    #this for setting the root directory for serving files:
    #root: This directive specifies the base directory for file requests.
    #it is set to /var/www/html/wordpress, meaning all requests without a specific location block will be served from this directory.
    root /var/www/html/wordpress

    #index index.php: Defines the default file to be served if a directory is requested.
    #index: This directive specifies the file to serve as the "index" of a directory.
    #typically index.html or index.php. In this case, index.php will be served as the homepage if no specific file is requested.
    index index.php;

    # A location block in Nginx is used to specify how Nginx should handle requests that match a certain pattern in the URL.
    # It’s essentially a set of instructions that apply to requests matching specific paths or file types (like PHP files in this case).
    location ~ \.php$
    {
            # FastCGI is a protocol that defines how your web server (Apache, nginx, lighttpd, etc.) communicates to your CGI program (your server side application in PHP, Ruby, Python, etc.) about the requests it receives. It's an extension of CGI.
            # In a nutshell, both CGI and FastCGI just describe how to pass a bunch of values — such as HTTP headers, the request body and client input — to the server-side part of your website.
            # In traditional CGI, when the web server receives an HTTP request it fires up your application as a process, connected by a pipe to send client input though standard input, and then puts all the other values into environment variables. The application then responds through standard output back to the web server which in turn sends it back to the client. FastCGI makes a few changes to this.
            # Instead of firing up a process with every request, they get started when the web server starts. The process then hangs around to deal with any requests and doesn't get killed when it finishes a request - it just waits for more. This gets rid of any overheads to do with killing and creating processes and allows the processes to do any "set-up" work only once.
            # FastCGI also stops using operating system pipes and environment variables for communication and instead multiplexes all of this information over a TCP connection. This means that your web server and application are now location independent and can be running on different machines.
            # To make use of FastCGI, most web servers have a module (often installed by default) to handle all of this.
            
            #include fastcgi_params;
            # include fastcgi_params; Includes the fastcgi_params file, which sets common parameters needed to pass requests from Nginx to FastCGI applications (in this case, PHP).
            # fastcgi_params: A file that defines environment variables and parameters used by FastCGI to handle PHP requests.
            include fastcgi_params;

            # fastcgi_pass wordpress:9000;: Specifies the backend server that will handle PHP requests.
            # fastcgi_pass: Sends PHP requests to a FastCGI server. Here, it points to wordpress:9000, which is container name (wordpress) listening on port 9000.
            fastcgi_pass wordpress:9000;

            #fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;: Sets the SCRIPT_FILENAME parameter, which provides the full file path for the requested PHP file.
            #$fastcgi_script_name: Automatically represents the URI path for the requested PHP file. Combining $document_root and $fastcgi_script_name creates the full path to the file on the server.
            #$document_root: Refers to the directory set by the root directive (/var/www/html/wordpress).
            #$fastcgi_script_name: Automatically represents the URI path for the requested PHP file. Combining $document_root and $fastcgi_script_name creates the full path to the file on the server.
            fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;  
    }

}
